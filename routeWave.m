%  * **********************************************************************
%  *
%  * Copyright (c) 2014 Regents of the University of California. All rights reserved.
%  *
%  * Redistribution and use in source and binary forms, with or without
%  * modification, are permitted provided that the following conditions
%  * are met:
%  *
%  * 1. Redistributions of source code must retain the above copyright
%  *    notice, this list of conditions and the following disclaimer.
%  *
%  * 2. Redistributions in binary form must reproduce the above copyright
%  *    notice, this list of conditions and the following disclaimer in the
%  *    documentation and/or other materials provided with the distribution.
%  *
%  * 3. The names of its contributors may not be used to endorse or promote
%  *    products derived from this software without specific prior written
%  *    permission.
%  *
%  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
%  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
%  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
%  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
%  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
%  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
%  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
%  * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
%  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
%  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
%  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%  *
%  * **********************************************************************

%
% routeWave - Calculates the first half of the trajectory using the familiar route
%   and the second half of the trajectory using survey or topological strategy.
%
% @param map - grid map. values in map reflect cost of traversal.
% @param lm - set of landmarks
% @param pRte - the learned route
% @param topo - use topological strategy if true, else use survey strategy
% @param rev - path starts with learned route in reverse if true, else learned route in forward direction.
% @param dispWave - display the trajectory
% @return path - path generated by spike wave front.
function pRteSW = routeWave (map, lm, pRte, topo, rev, dispWave)

% route then spike wave
inx = round(size(pRte,1)/2);
if topo
    p = topoWave (map, lm, pRte(inx+1,1), pRte(inx+1,2), pRte(end,1), pRte(end,2), 0);
else
    p = spikeWave (map, pRte(inx+1,1), pRte(inx+1,2), pRte(end,1), pRte(end,2), 0);
end
pRteSW = pRte(1:inx,:);
for i=size(p,2):-1:1
    inx=inx+1;
    pRteSW(inx,1)=p(i).x;
    pRteSW(inx,2)=p(i).y;
end

if dispWave
    dispMap = map;
    dispMap(pRteSW(1,1),pRteSW(1,2)) = 50;
    for i = 2:size(pRteSW,1)
        dispMap(pRteSW(i,1),pRteSW(i,2)) = 20;
    end
    dispMap(pRteSW(end,1),pRteSW(end,2)) = 75;
    imagesc(dispMap);
    axis square;
    axis off;
    if ~topo && ~rev
        title(['Route+Surv S(', num2str(pRteSW(1,1)), ',', num2str(pRteSW(1,2)), ') E(', num2str(pRteSW(end,1)), ',', num2str(pRteSW(end,1)), ')'])
    elseif ~topo && rev
        title(['RevRoute+Surv S(', num2str(pRteSW(1,1)), ',', num2str(pRteSW(1,2)), ') E(', num2str(pRteSW(end,1)), ',', num2str(pRteSW(end,1)), ')'])
    elseif topo && ~rev
        title(['Route+Topo S(', num2str(pRteSW(1,1)), ',', num2str(pRteSW(1,2)), ') E(', num2str(pRteSW(end,1)), ',', num2str(pRteSW(end,1)), ')'])
    else
        title(['RevRoute+Topo S(', num2str(pRteSW(1,1)), ',', num2str(pRteSW(1,2)), ') E(', num2str(pRteSW(end,1)), ',', num2str(pRteSW(end,1)), ')'])
    end
end

end
